# Ruby CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-ruby/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/ruby:2.7.4-node-browsers

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    steps:
      - checkout

      - restore_cache:
          name: Attempt to restore dependencies
          keys:
          - v1-dependencies-{{ checksum "Gemfile.lock" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: Install dependencies
          command: |
            bundle install --jobs=4 --retry=3 --path vendor/bundle

      - save_cache:
          name: Cache dependencies
          paths:
            - ./vendor/bundle
          key: v1-dependencies-{{ checksum "Gemfile.lock" }}

      - run:
          name: Database setup
          command: |
            bundle exec rake db:create
            bundle exec rake db:schema:load

      - run:
          name: Run RuboCop
          command: |
            bundle exec rubocop

      - run:
          name: Run tests
          command: |
            bundle exec rake test

      - run:
          name: Run `rails afx:db:reset`
          command: |
            bundle exec rails afx:db:reset

      # # These are the sample instructions provided by CircleCI
      # - run:
      #     name: Run tests
      #     command: |
      #       mkdir /tmp/test-results
      #       TEST_FILES="$(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)"
      #
      #       bundle exec rspec --format progress \
      #                       --format RspecJunitFormatter \
      #                       --out /tmp/test-results/rspec.xml \
      #                       --format progress \
      #                       $TEST_FILES
      #
      # - store_test_results:
      #     name: Collect reports
      #     path: /tmp/test-results
      #
      # - store_artifacts:
      #     name: Collect reports
      #     path: /tmp/test-results
      #     destination: test-results
